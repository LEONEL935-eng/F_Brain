version: '3.8'

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  grafana_data:

services:
  nginx:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks: [backend]
    depends_on:
      - frontend
      - web

  grafana:
    image: grafana/grafana:latest
    env_file: .env
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    networks: [backend]
    depends_on:
      prometheus:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:latest
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn server_config.wsgi:application --bind 0.0.0.0:8000
      "
    networks: [backend]
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    expose:
      - "4173"
    ports:
      - "4173:4173"
    networks: [backend]
    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    networks: [backend]
    depends_on:
      - db
